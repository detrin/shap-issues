{
  "url": "https://api.github.com/repos/shap/shap/issues/828",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/828/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/828/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/828/events",
  "html_url": "https://github.com/shap/shap/issues/828",
  "id": 497337889,
  "node_id": "MDU6SXNzdWU0OTczMzc4ODk=",
  "number": 828,
  "title": "`import shap` can cause memory leaks when any one of `xgboost`, `catboost`, etc. is not found",
  "user": {
    "login": "jaykz52",
    "id": 355528,
    "node_id": "MDQ6VXNlcjM1NTUyOA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/355528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jaykz52",
    "html_url": "https://github.com/jaykz52",
    "followers_url": "https://api.github.com/users/jaykz52/followers",
    "following_url": "https://api.github.com/users/jaykz52/following{/other_user}",
    "gists_url": "https://api.github.com/users/jaykz52/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jaykz52/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jaykz52/subscriptions",
    "organizations_url": "https://api.github.com/users/jaykz52/orgs",
    "repos_url": "https://api.github.com/users/jaykz52/repos",
    "events_url": "https://api.github.com/users/jaykz52/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jaykz52/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-09-23T21:28:06Z",
  "updated_at": "2019-09-23T21:28:06Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Consider the following (somewhat arbitrary) example:\r\n\r\n```\r\nclass Data:\r\n    def __init__(self):\r\n        self.contents = \"test_123\"\r\n\r\n\r\nclass Worker:\r\n    def do_work(self):\r\n        # Load data (potentially a LOT of data...)\r\n        data = Data()\r\n\r\n        import shap\r\n\r\n        print(\"Do some work...\")\r\n\r\n\r\ndef main():\r\n    Worker().do_work()\r\n\r\n\r\nmain()\r\n\r\n\r\nimport objgraph\r\n\r\nleaked_data = objgraph.by_type(\"Data\")\r\nobjgraph.show_backrefs(leaked_data, max_depth=17, refcounts=True, filename=\"leaks.png\")\r\n```\r\n\r\nThis produces the following graph:\r\n\r\n![leaks](https://user-images.githubusercontent.com/355528/65463830-66abff80-de0d-11e9-8f93-00404c0650e1.png)\r\n\r\nYou can see that the `Data` object instantiated in `Worker.do_work()` is leaked via a traceback captured within `shap`\r\n\r\nI believe this is a side-effect of https://github.com/slundberg/shap/blob/aabab42b39a9417f537e8124334a38d967f04b2b/shap/explainers/tree.py#L31 /   https://github.com/slundberg/shap/blob/aabab42b39a9417f537e8124334a38d967f04b2b/shap/common.py#L21\r\n\r\nThis behavior is unexpected, and could potentially lead to a substantial leak. The size of `Data.contents` in memory in this example is small, but you can imagine a scenario where that wouldn't be the case. \r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/828/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/828/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
