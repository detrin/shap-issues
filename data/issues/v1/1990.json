{
  "url": "https://api.github.com/repos/shap/shap/issues/1990",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/1990/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/1990/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/1990/events",
  "html_url": "https://github.com/shap/shap/issues/1990",
  "id": 885040062,
  "node_id": "MDU6SXNzdWU4ODUwNDAwNjI=",
  "number": 1990,
  "title": "Encountering `TypeError` with nulls in either background data or examples",
  "user": {
    "login": "vperiyasamy",
    "id": 12632505,
    "node_id": "MDQ6VXNlcjEyNjMyNTA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/12632505?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vperiyasamy",
    "html_url": "https://github.com/vperiyasamy",
    "followers_url": "https://api.github.com/users/vperiyasamy/followers",
    "following_url": "https://api.github.com/users/vperiyasamy/following{/other_user}",
    "gists_url": "https://api.github.com/users/vperiyasamy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vperiyasamy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vperiyasamy/subscriptions",
    "organizations_url": "https://api.github.com/users/vperiyasamy/orgs",
    "repos_url": "https://api.github.com/users/vperiyasamy/repos",
    "events_url": "https://api.github.com/users/vperiyasamy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vperiyasamy/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2021-05-10T20:26:13Z",
  "updated_at": "2021-05-10T20:26:13Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi! We're encountering an issue with the `KernelExplainer` where if either the background dataset or the example set we're explaining has nulls, SHAP fails with `TypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''`.\r\n\r\nFor reference, our model has a hard restriction on being a scikit-learn `Pipeline`, and the data has mixed types (e.g. string, numeric, boolean, etc.). Thus, we encode all preprocessors and imputation into the model pipeline, and the data we feed into SHAP must be untransformed. We're also using `KernelExplainer` because we use this pipeline with a variety of underlying models, (scikit-learn classifiers and regressors of varying types). Here is an example snippet of our code:\r\n\r\n```\r\ntrain_sample = X_train.sample(n=min(100, len(X_train.index)))\r\nexample = X_val.sample(n=1).fillna(mode)\r\n\r\npredict = lambda x: model.predict(pd.DataFrame(x, columns=X_train.columns))\r\nexplainer = KernelExplainer(predict, train_sample, link=\"identity\")\r\nshap_values = explainer.shap_values(example, l1_reg=False)\r\nsummary_plot(shap_values, example)\r\n```\r\n\r\nOur current workaround is to naively impute the samples we use as the background data and the examples to explain - however, is there a more robust solution? Perhaps ignoring the columns with nulls when computing contributions for feature importance? We'd like to better understand if this is limitation with SHAP or the underlying algorithm.\r\n\r\nThe full stack trace for the error:\r\n```\r\n<command-3375102232744039> in <module>\r\n     14     predict = lambda x: model.predict(pd.DataFrame(x, columns=X_train.columns))\r\n     15     explainer = KernelExplainer(predict, train_sample, link=\"identity\")\r\n---> 16     shap_values = explainer.shap_values(example, l1_reg=False)\r\n     17     summary_plot(shap_values, example)\r\n     18 except Exception as e:\r\n\r\n/databricks/python/lib/python3.8/site-packages/shap/explainers/_kernel.py in shap_values(self, X, **kwargs)\r\n    184                 if self.keep_index:\r\n    185                     data = convert_to_instance_with_index(data, column_name, index_value[i:i + 1], index_name)\r\n--> 186                 explanations.append(self.explain(data, **kwargs))\r\n    187 \r\n    188             # vector-output\r\n\r\n/databricks/python/lib/python3.8/site-packages/shap/explainers/_kernel.py in explain(self, incoming_instance, **kwargs)\r\n    209         # find the feature groups we will test. If a feature does not change from its\r\n    210         # current value then we know it doesn't impact the model\r\n--> 211         self.varyingInds = self.varying_groups(instance.x)\r\n    212         if self.data.groups is None:\r\n    213             self.varyingFeatureGroups = np.array([i for i in self.varyingInds])\r\n\r\n/databricks/python/lib/python3.8/site-packages/shap/explainers/_kernel.py in varying_groups(self, x)\r\n    407                         continue\r\n    408                     x_group = x_group.todense()\r\n--> 409                 num_mismatches = np.sum(np.frompyfunc(self.not_equal, 2, 1)(x_group, self.data.data[:, inds]))\r\n    410                 varying[i] = num_mismatches > 0\r\n    411             varying_indices = np.nonzero(varying)[0]\r\n\r\n/databricks/python/lib/python3.8/site-packages/shap/explainers/_kernel.py in not_equal(i, j)\r\n    394         if isinstance(i, str) or isinstance(j, str):\r\n    395             return 0 if i == j else 1\r\n--> 396         return 0 if np.isclose(i, j, equal_nan=True) else 1\r\n    397 \r\n    398     def varying_groups(self, x):\r\n\r\n<__array_function__ internals> in isclose(*args, **kwargs)\r\n\r\n/databricks/python/lib/python3.8/site-packages/numpy/core/numeric.py in isclose(a, b, rtol, atol, equal_nan)\r\n   2286 \r\n   2287     xfin = isfinite(x)\r\n-> 2288     yfin = isfinite(y)\r\n   2289     if all(xfin) and all(yfin):\r\n   2290         return within_tol(x, y, atol, rtol)\r\n\r\nTypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/1990/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/1990/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
