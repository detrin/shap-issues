{
  "url": "https://api.github.com/repos/shap/shap/issues/1713",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/1713/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/1713/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/1713/events",
  "html_url": "https://github.com/shap/shap/issues/1713",
  "id": 779214466,
  "node_id": "MDU6SXNzdWU3NzkyMTQ0NjY=",
  "number": 1713,
  "title": "Explainer for CatBoostClassifier with iris: ValueError array is too big",
  "user": {
    "login": "sbushmanov",
    "id": 8139370,
    "node_id": "MDQ6VXNlcjgxMzkzNzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8139370?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sbushmanov",
    "html_url": "https://github.com/sbushmanov",
    "followers_url": "https://api.github.com/users/sbushmanov/followers",
    "following_url": "https://api.github.com/users/sbushmanov/following{/other_user}",
    "gists_url": "https://api.github.com/users/sbushmanov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sbushmanov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sbushmanov/subscriptions",
    "organizations_url": "https://api.github.com/users/sbushmanov/orgs",
    "repos_url": "https://api.github.com/users/sbushmanov/repos",
    "events_url": "https://api.github.com/users/sbushmanov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sbushmanov/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2021-01-05T15:56:41Z",
  "updated_at": "2021-01-05T17:45:51Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "`self.children_left = -np.ones((num_trees, max_nodes), dtype=np.int32)` proposes to build `(1000, 4624633867356078080)` matrix when parsing `CatBoostClassifier` trees, which seems unreasonable and results in segmentation fault.\r\n\r\nTo reproduce error:\r\n\r\n```\r\nfrom catboost import CatBoostClassifier\r\nfrom sklearn.model_selection import train_test_split\r\nfrom shap import Explainer\r\nfrom shap.datasets import iris\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(*iris(), random_state=42)\r\nmodel = CatBoostClassifier(max_depth=3, random_state=42, verbose=0).fit(X_train, y_train)\r\nexp = Explainer(model, X_test, algorithm=\"tree\", feature_perturbation=\"interventional\")\r\n```\r\n```\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-5-e84c23526bc1> in <module>\r\n      1 # %%debug\r\n      2 \r\n----> 3 exp = Explainer(model, X_test, algorithm=\"tree\", feature_perturbation=\"interventional\")\r\n\r\n~/anaconda3/lib/python3.7/site-packages/shap/explainers/_explainer.py in __init__(self, model, masker, link, algorithm, output_names, feature_names, **kwargs)\r\n    159             elif algorithm == \"tree\":\r\n    160                 self.__class__ = explainers.Tree\r\n--> 161                 explainers.Tree.__init__(self, self.model, self.masker, link=self.link, feature_names=self.feature_names, **kwargs)\r\n    162             elif algorithm == \"additive\":\r\n    163                 self.__class__ = explainers.Additive\r\n\r\n~/anaconda3/lib/python3.7/site-packages/shap/explainers/_tree.py in __init__(self, model, data, model_output, feature_perturbation, feature_names, **deprecated_options)\r\n    145         self.feature_perturbation = feature_perturbation\r\n    146         self.expected_value = None\r\n--> 147         self.model = TreeEnsemble(model, self.data, self.data_missing, model_output)\r\n    148         self.model_output = model_output\r\n    149         #self.model_output = self.model.model_output # this allows the TreeEnsemble to translate model outputs types by how it loads the model\r\n\r\n~/anaconda3/lib/python3.7/site-packages/shap/explainers/_tree.py in __init__(self, model, data, data_missing, model_output)\r\n    990 \r\n    991             # important to be -1 in unused sections!! This way we can tell which entries are valid.\r\n--> 992             self.children_left = -np.ones((num_trees, max_nodes), dtype=np.int32)\r\n    993             self.children_right = -np.ones((num_trees, max_nodes), dtype=np.int32)\r\n    994             self.children_default = -np.ones((num_trees, max_nodes), dtype=np.int32)\r\n\r\n~/anaconda3/lib/python3.7/site-packages/numpy/core/numeric.py in ones(shape, dtype, order)\r\n    205 \r\n    206     \"\"\"\r\n--> 207     a = empty(shape, dtype, order)\r\n    208     multiarray.copyto(a, 1, casting='unsafe')\r\n    209     return a\r\n\r\nValueError: array is too big; `arr.size * arr.dtype.itemsize` is larger than the maximum possible size.\r\n```\r\nThe error seem to come from:\r\n\r\n```\r\nself.trees = cb_loader.get_trees(data=data, data_missing=data_missing)\r\n```\r\nand\r\n```\r\n[len(t.values) for t in self.trees]\r\n```\r\nthat would result in:\r\n```\r\n[4624633867356078080, 47, 47, 47, 47, 4622945017495814144, 4616189618054758400, 4624633867356078080, 47, 47, 47, 47, ..., 47]\r\n```\r\nCannot reproduce it in debugger as `[len(t.values) for t in CatBoostTreeModelLoader(model).get_trees(data)]` produces a monotonic list of reasonable `47`\r\n```\r\ncatboost                           0.24.4 (conda installed)\r\nshap                               0.37.0 (pip installed from master)\r\n```",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/1713/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/1713/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
