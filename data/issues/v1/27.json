{
  "url": "https://api.github.com/repos/shap/shap/issues/27",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/27/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/27/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/27/events",
  "html_url": "https://github.com/shap/shap/issues/27",
  "id": 293109157,
  "node_id": "MDU6SXNzdWUyOTMxMDkxNTc=",
  "number": 27,
  "title": "Explanation plotting in python instead of JS",
  "user": {
    "login": "asstergi",
    "id": 9599766,
    "node_id": "MDQ6VXNlcjk1OTk3NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9599766?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asstergi",
    "html_url": "https://github.com/asstergi",
    "followers_url": "https://api.github.com/users/asstergi/followers",
    "following_url": "https://api.github.com/users/asstergi/following{/other_user}",
    "gists_url": "https://api.github.com/users/asstergi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asstergi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asstergi/subscriptions",
    "organizations_url": "https://api.github.com/users/asstergi/orgs",
    "repos_url": "https://api.github.com/users/asstergi/repos",
    "events_url": "https://api.github.com/users/asstergi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asstergi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 24,
  "created_at": "2018-01-31T10:39:24Z",
  "updated_at": "2022-06-14T12:27:57Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi @slundberg ,\r\n\r\nFirstly, thank you for this great model interpretation algorithm and implementation! It's really amazing that you've also added it directly into the XGBoost and LightGBM models.\r\n\r\nOne question. I was trying to create a plot similar to the one you get from something like `shap.visualize(shap_values[0,:], X.iloc[0,:])` without using a notebook. For example, for the dependency plot you are using `matplotlib.pyplot`.\r\n\r\nWould it be possible to add an option for `shap.visualize()` to use `matplotlib.pyplot` instead of javascript (even if the new plot won't be interactive)? Or, could you give me some guidance for doing so?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/27/reactions",
    "total_count": 8,
    "+1": 8,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/27/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
