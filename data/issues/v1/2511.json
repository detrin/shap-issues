{
  "url": "https://api.github.com/repos/shap/shap/issues/2511",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/2511/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/2511/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/2511/events",
  "html_url": "https://github.com/shap/shap/issues/2511",
  "id": 1210617075,
  "node_id": "I_kwDOBHDcK85IKIzz",
  "number": 2511,
  "title": "One possible solution for DeepExplainer RuntimeError when using pytorch",
  "user": {
    "login": "RigCor7",
    "id": 102867142,
    "node_id": "U_kgDOBiGgxg",
    "avatar_url": "https://avatars.githubusercontent.com/u/102867142?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/RigCor7",
    "html_url": "https://github.com/RigCor7",
    "followers_url": "https://api.github.com/users/RigCor7/followers",
    "following_url": "https://api.github.com/users/RigCor7/following{/other_user}",
    "gists_url": "https://api.github.com/users/RigCor7/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/RigCor7/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/RigCor7/subscriptions",
    "organizations_url": "https://api.github.com/users/RigCor7/orgs",
    "repos_url": "https://api.github.com/users/RigCor7/repos",
    "events_url": "https://api.github.com/users/RigCor7/events{/privacy}",
    "received_events_url": "https://api.github.com/users/RigCor7/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-04-21T07:31:21Z",
  "updated_at": "2023-08-21T06:01:24Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## I met the problem below when I used my own CNN module\r\n\r\n\r\nRuntimeError                              Traceback (most recent call last)\r\n[<ipython-input-40-eed86578713c>](https://localhost:8080/#) in <module>()\r\n      7 print(test_images.shape)\r\n      8 e = shap.DeepExplainer(model, background)\r\n----> 9 shap_values = e.shap_values(test_images)\r\n\r\n5 frames\r\n[/usr/local/lib/python3.7/dist-packages/shap/explainers/_deep/deep_pytorch.py](https://localhost:8080/#) in maxpool(module, grad_input, grad_output)\r\n    328             module.dilation, module.ceil_mode, True)\r\n    329         xmax_pos, rmax_pos = torch.chunk(pool_to_unpool[module.__class__.__name__](\r\n--> 330             grad_output[0] * diffs, indices, module.kernel_size, module.stride,\r\n    331             module.padding, list(module.x.shape)), 2)\r\n    332     org_input_shape = grad_input[0].shape  # for the maxpool 1d\r\n\r\n**RuntimeError: The size of tensor a (12) must match the size of tensor b (4) at non-singleton dimension 3**\r\n\r\n## My module is below:\r\n    class FCNN(nn.Module):\r\n        def __init__(self, num_classes):\r\n            super(FCNN, self).__init__()\r\n            self.conv1 = nn.Conv2d(1, 32, 5)\r\n            self.pool = nn.MaxPool2d(2, 2)\r\n            self.conv2 = nn.Conv2d(32, 64, 5)\r\n    \r\n            self.fc1 = nn.Linear(64 * 4 * 4, 2048)\r\n            self.output = nn.Linear(2048, num_classes)\r\n    \r\n        def forward(self, x):\r\n            x = self.pool(F.relu(self.conv1(x)))\r\n            x = self.pool(F.relu(self.conv2(x)))\r\n            x = x.view(-1, 64 * 4 * 4)\r\n            x = F.relu(self.fc1(x))\r\n            x = self.output(x)\r\n            return x\r\n\r\n**I found the DeepExplainer could work** if I change my module writing style to  this [example](https://github.com/slundberg/shap/blob/master/docs/notebooks/deep_explainer/PyTorch%20Deep%20Explainer%20MNIST%20example.html) module writing style, i.e.\r\n\r\n        class Net(nn.Module):\r\n            def __init__(self):\r\n                super(Net, self).__init__()\r\n                self.conv_layers = nn.Sequential(\r\n                    nn.Conv2d(1, 32, kernel_size=5),\r\n                    nn.MaxPool2d(2),\r\n                    nn.ReLU(),\r\n                    nn.Conv2d(32, 64, kernel_size=5),\r\n                    nn.MaxPool2d(2),\r\n                    nn.ReLU(),\r\n                )\r\n                self.fc_layers = nn.Sequential(\r\n                    nn.Linear(1024, 2048),\r\n                    nn.ReLU(),\r\n                    nn.Linear(2048, 10)\r\n                )\r\n        \r\n            def forward(self, x):\r\n                x = self.conv_layers(x)\r\n                x = x.view(-1, 1024)\r\n                x = self.fc_layers(x)\r\n                return x\r\n\r\nI don't know how it's effective, but it's very useful!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/2511/reactions",
    "total_count": 14,
    "+1": 13,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/2511/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
