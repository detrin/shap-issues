{
  "url": "https://api.github.com/repos/shap/shap/issues/136",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/136/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/136/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/136/events",
  "html_url": "https://github.com/shap/shap/issues/136",
  "id": 336821415,
  "node_id": "MDU6SXNzdWUzMzY4MjE0MTU=",
  "number": 136,
  "title": "Interface updates to support deep models",
  "user": {
    "login": "slundberg",
    "id": 3740613,
    "node_id": "MDQ6VXNlcjM3NDA2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3740613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/slundberg",
    "html_url": "https://github.com/slundberg",
    "followers_url": "https://api.github.com/users/slundberg/followers",
    "following_url": "https://api.github.com/users/slundberg/following{/other_user}",
    "gists_url": "https://api.github.com/users/slundberg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/slundberg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/slundberg/subscriptions",
    "organizations_url": "https://api.github.com/users/slundberg/orgs",
    "repos_url": "https://api.github.com/users/slundberg/repos",
    "events_url": "https://api.github.com/users/slundberg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/slundberg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-06-29T00:14:38Z",
  "updated_at": "2018-07-17T16:20:44Z",
  "closed_at": "2018-07-17T16:20:44Z",
  "author_association": "COLLABORATOR",
  "active_lock_reason": null,
  "body": "In our NIPS paper we noted a connection between SHAP values and DeepLIFT, where DeepLIFT can be viewed as a way to approximate SHAP values for compositional (deep) models. To support high speed approximation of SHAP values for deep models, we have extended DeepLIFT with ideas from SHAP (such as using expectations instead of choosing a single reference value for comparisons). This is related to issues #99, #40, #105, and #77. The initial version of DeepExplainer is still in alpha (supporting tensorflow/keras) but it has brought up two issues with the current interface for returning shap_values:\r\n\r\n- Right now the last column of the returned shap_values matrix is the expected model output. This was copied from a design choice made in XGBoost, but has lead to many questions since it means the matrix of shap_values has one more column than the original data matrix. This is a bit confusing, but does make each row sum to the model output.\r\n- shap_interaction_values matrices are 3 dimensional and have an extra position in both the 2nd and third dimensions so that the expected model output can be saved in the corner slot of the interaction matrix. This is a bit confusing, but does make each matrix sum to the model output.\r\n\r\nFor deep learning models the inputs are often multi-dimensional so:\r\n- It is no longer clear that a 3-dimensional matrix would be of SHAP interaction values, so the plotting methods can't assume that anymore.\r\n- It would be confusing and a pain to add an extra slot to every dimension (other than the first) just to create space for a single expected model output value.\r\n\r\nTo address this we could:\r\n1) Type the arrays that are returned from shap_values to reflect what they are and allow the expected model output to be in a `shap_values.expected_value` attribute. This would remove the confusing last column, enable multi-dimensional input for deep models, and also allow SHAP values and SHAP interaction values to be distinguishable. The types would just be trivial subtypes of ndarray.\r\n2) We could just not return the expected value. The problem is some plots (like `force_plot`) need it, and it is useful to have. To make it available would could make it a property of the explainer object.\r\n3) We could return a tuple where one element is the expected value and the other is the shap_values matrix. This could be nice but then both values need to be dealt with all the time, and passed around everywhere we need them which could be a pain.\r\n\r\nI am not putting this up for a vote. But I am writing down my thoughts to help me think it out, and doing it publicly in case anyone has feedback they would like to offer. This also serves as a heads up that some breaking interface tweak needs to happen. Thanks!\r\n",
  "closed_by": {
    "login": "slundberg",
    "id": 3740613,
    "node_id": "MDQ6VXNlcjM3NDA2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3740613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/slundberg",
    "html_url": "https://github.com/slundberg",
    "followers_url": "https://api.github.com/users/slundberg/followers",
    "following_url": "https://api.github.com/users/slundberg/following{/other_user}",
    "gists_url": "https://api.github.com/users/slundberg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/slundberg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/slundberg/subscriptions",
    "organizations_url": "https://api.github.com/users/slundberg/orgs",
    "repos_url": "https://api.github.com/users/slundberg/repos",
    "events_url": "https://api.github.com/users/slundberg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/slundberg/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/136/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/136/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
