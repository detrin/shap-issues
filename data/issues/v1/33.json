{
  "url": "https://api.github.com/repos/shap/shap/issues/33",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/33/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/33/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/33/events",
  "html_url": "https://github.com/shap/shap/issues/33",
  "id": 295544522,
  "node_id": "MDU6SXNzdWUyOTU1NDQ1MjI=",
  "number": 33,
  "title": "SHAP in unsupervised anomaly detection",
  "user": {
    "login": "asstergi",
    "id": 9599766,
    "node_id": "MDQ6VXNlcjk1OTk3NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9599766?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asstergi",
    "html_url": "https://github.com/asstergi",
    "followers_url": "https://api.github.com/users/asstergi/followers",
    "following_url": "https://api.github.com/users/asstergi/following{/other_user}",
    "gists_url": "https://api.github.com/users/asstergi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asstergi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asstergi/subscriptions",
    "organizations_url": "https://api.github.com/users/asstergi/orgs",
    "repos_url": "https://api.github.com/users/asstergi/repos",
    "events_url": "https://api.github.com/users/asstergi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asstergi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-02-08T15:02:26Z",
  "updated_at": "2022-06-11T13:28:37Z",
  "closed_at": "2018-02-12T10:20:55Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi @slundberg ,\r\n\r\nI'm facing a specific use case where I try to interpret multivariate anomaly detection algorithms. So, I have a dataset, I apply an unsupervised anomaly detection algorithm (e.g. Isolation Forest) and get which data samples are anomalous. Then, I build a supervised model (XGBoost) and I'm getting the SHAP values in order to explain the anomalies.\r\n\r\nI have a question that is more or less 'philosophical'. Since I will not be using the supervised model to make predictions on new data, how should the model be trained? Is it ok to train the XGBoost model on the dataset and then make the predictions (and get the SHAP values) on the same dataset? Could the SHAP values 'overfit' since I'm using the model on the dataset it was trained on? Or should I, still, create different train-test datasets? \r\n\r\nMy guess is that I should still use different train/test sets but I'm not convinced this is the correct approach. Any thoughts?",
  "closed_by": {
    "login": "asstergi",
    "id": 9599766,
    "node_id": "MDQ6VXNlcjk1OTk3NjY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9599766?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/asstergi",
    "html_url": "https://github.com/asstergi",
    "followers_url": "https://api.github.com/users/asstergi/followers",
    "following_url": "https://api.github.com/users/asstergi/following{/other_user}",
    "gists_url": "https://api.github.com/users/asstergi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/asstergi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/asstergi/subscriptions",
    "organizations_url": "https://api.github.com/users/asstergi/orgs",
    "repos_url": "https://api.github.com/users/asstergi/repos",
    "events_url": "https://api.github.com/users/asstergi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/asstergi/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/33/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/33/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
