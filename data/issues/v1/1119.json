{
  "url": "https://api.github.com/repos/shap/shap/issues/1119",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/1119/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/1119/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/1119/events",
  "html_url": "https://github.com/shap/shap/issues/1119",
  "id": 587020097,
  "node_id": "MDU6SXNzdWU1ODcwMjAwOTc=",
  "number": 1119,
  "title": "Unable to obtain shap values using embedding layer, tf 2.1.0 & shap 0.35.0",
  "user": {
    "login": "kingjosephm",
    "id": 58754182,
    "node_id": "MDQ6VXNlcjU4NzU0MTgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/58754182?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kingjosephm",
    "html_url": "https://github.com/kingjosephm",
    "followers_url": "https://api.github.com/users/kingjosephm/followers",
    "following_url": "https://api.github.com/users/kingjosephm/following{/other_user}",
    "gists_url": "https://api.github.com/users/kingjosephm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kingjosephm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kingjosephm/subscriptions",
    "organizations_url": "https://api.github.com/users/kingjosephm/orgs",
    "repos_url": "https://api.github.com/users/kingjosephm/repos",
    "events_url": "https://api.github.com/users/kingjosephm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kingjosephm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2020-03-24T14:54:07Z",
  "updated_at": "2022-10-10T10:49:07Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "## Full code using synthetic data to exemplify error message\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom tensorflow.keras.optimizers import Adam\r\nfrom tensorflow.keras.losses import MSE\r\nfrom tensorflow.keras.models import Model\r\nfrom tensorflow.keras.layers import Input, Dense, Embedding, Flatten, Concatenate\r\nfrom tensorflow.keras.backend import clear_session\r\nfrom sklearn.model_selection import train_test_split\r\nimport shap\r\n\r\ndef convert_list(df):\r\n    '''\r\n    :param df: Pandas dataframe\r\n    :return: list of lists, with each categorical feature (as pd.Series) in its own list,\r\n            and one list (of pd.DataFrame) of numeric features\r\n    '''\r\n    return [df[col] for col in categorical_features] + [df[numeric_features]]\r\n\r\ndef expand_to_2d(arr):\r\n    '''\r\n    Expand a numpy array to two dimensions if it is one-dimensional.\r\n    :param arr: Numpy array\r\n    :return: expanded Numpy array\r\n    '''\r\n    if len(arr.shape) >= 2:\r\n        return arr\r\n    return np.expand_dims(arr, axis=1)\r\n\r\n\r\n#### Synthesize data\r\nnp.random.seed(123)\r\ncat1 = np.random.randint(low=1, high=5, size=100) # assume factorized categorical variable\r\ncat2 = np.random.randint(low=1, high=10, size=100) # assume factorized categorical variable\r\nnum1 = np.random.random(size=100) # assume continuous variable that's been min-max normalized\r\nnum2 = np.random.random(size=100) # assume continuous variable that's been min-max normalized\r\noutcome = np.random.randint(low=1, high=100, size=100)\r\ndf = pd.DataFrame({'cat1': cat1, 'cat2': cat2, 'num1': num1, 'num2': num2, 'outcome': outcome})\r\n\r\n#### Train, validation sets\r\nX_train, X_val, y_train, y_val = train_test_split(df, df['outcome'], test_size=0.25, random_state=123)\r\n\r\n#### Identify categorical vs. numeric features in dataset\r\ncategorical_features = ['cat1']\r\nnumeric_features = ['num1']\r\n\r\nX_train_list = convert_list(X_train)\r\nX_val_list = convert_list(X_val)\r\n\r\n#### Build model (Keras Model API)\r\nclear_session()\r\ncategorical_input_layers = [Input(shape=(1,), dtype='int32') for _ in categorical_features]\r\nembedded_layers = [Embedding(input_dim=df[col].nunique() + 1, output_dim=1)(lyr) for (col, lyr) in zip(categorical_features, categorical_input_layers)]\r\nflatten_layer = [Flatten()(lyr) for lyr in embedded_layers]\r\nnumeric_input_layer = Input(shape=(len(numeric_features),))\r\nconcat_layer = Concatenate(axis=1)(flatten_layer + [numeric_input_layer])\r\ndense_layer = Dense(128, activation='relu')(concat_layer)\r\noutput_layer = Dense(1, activation='linear', name='output')(dense_layer)\r\nmodel = Model(inputs=categorical_input_layers+[numeric_input_layer], outputs=output_layer)\r\n\r\n#### Fit model\r\nmodel.compile(loss=MSE, optimizer=Adam(amsgrad=True), metrics=[MSE])\r\nmodel.fit(X_train_list, y_train, epochs=50, batch_size=256, verbose=0, validation_data=(X_val_list, y_val))\r\n\r\n#### Subsample & reshape data\r\nsample = [i[:5] for i in X_train_list] # get first 5 obs of X_train\r\nreshaped_sample = [expand_to_2d(i.values) for i in sample]\r\n\r\n#### Get shap values\r\nexplainer = shap.DeepExplainer(model, reshaped_sample)\r\nshap_values = explainer.shap_values(reshaped_sample) # breaks here\r\n\r\n## Traceback\r\nWARNING:tensorflow:The dtype of the watched tensor must be floating (e.g. tf.float32), got tf.int32\r\nWARNING:tensorflow:The dtype of the source tensor must be floating (e.g. tf.float32) when calling GradientTape.gradient, got tf.int32\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\shap\\explainers\\deep\\__init__.py\", line 119, in shap_values\r\n    return self.explainer.shap_values(X, ranked_outputs, output_rank_order, check_additivity=check_additivity)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\shap\\explainers\\deep\\deep_tf.py\", line 304, in shap_values\r\n    sample_phis = self.run(self.phi_symbolic(feature_ind), self.model_inputs, joint_input)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\shap\\explainers\\deep\\deep_tf.py\", line 361, in run\r\n    return self.execute_with_overridden_gradients(anon)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\shap\\explainers\\deep\\deep_tf.py\", line 397, in execute_with_overridden_gradients\r\n    out = f()\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\shap\\explainers\\deep\\deep_tf.py\", line 357, in anon\r\n    final_out = out(inputs)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\def_function.py\", line 568, in __call__\r\n    result = self._call(*args, **kwds)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\def_function.py\", line 615, in _call\r\n    self._initialize(args, kwds, add_initializers_to=initializers)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\def_function.py\", line 497, in _initialize\r\n    *args, **kwds))\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\function.py\", line 2389, in _get_concrete_function_internal_garbage_collected\r\n    graph_function, _, _ = self._maybe_define_function(args, kwargs)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\function.py\", line 2703, in _maybe_define_function\r\n    graph_function = self._create_graph_function(args, kwargs)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\function.py\", line 2593, in _create_graph_function\r\n    capture_by_value=self._capture_by_value),\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\framework\\func_graph.py\", line 978, in func_graph_from_py_func\r\n    func_outputs = python_func(*func_args, **func_kwargs)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\def_function.py\", line 439, in wrapped_fn\r\n    return weak_wrapped_fn().__wrapped__(*args, **kwds)\r\n  File \"C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\framework\\func_graph.py\", line 968, in wrapper\r\n    raise e.ag_error_metadata.to_exception(e)\r\ntensorflow.python.framework.errors_impl.InternalError: in converted code:\r\n    C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\shap\\explainers\\deep\\deep_tf.py:244 grad_graph  *\r\n        x_grad = tape.gradient(out, shap_rAnD)\r\n    C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\backprop.py:1029 gradient\r\n        unconnected_gradients=unconnected_gradients)\r\n    C:\\Users\\jking\\Documents\\PythonVirtualEnv\\20200301\\lib\\site-packages\\tensorflow_core\\python\\eager\\imperative_grad.py:77 imperative_grad\r\n        compat.as_str(unconnected_gradients.value))\r\n    `InternalError: Recorded operation 'shap_ResourceGather' returned too few gradients. Expected 2 but received 3`",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/1119/reactions",
    "total_count": 16,
    "+1": 16,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/1119/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
