{
  "url": "https://api.github.com/repos/shap/shap/issues/1151",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/1151/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/1151/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/1151/events",
  "html_url": "https://github.com/shap/shap/issues/1151",
  "id": 599042691,
  "node_id": "MDU6SXNzdWU1OTkwNDI2OTE=",
  "number": 1151,
  "title": "Shap values do not sum to model output - expected value for interventional TreeExplainer (v 0.35) [xgboost]",
  "user": {
    "login": "alexcoca",
    "id": 30216068,
    "node_id": "MDQ6VXNlcjMwMjE2MDY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/30216068?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexcoca",
    "html_url": "https://github.com/alexcoca",
    "followers_url": "https://api.github.com/users/alexcoca/followers",
    "following_url": "https://api.github.com/users/alexcoca/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexcoca/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexcoca/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexcoca/subscriptions",
    "organizations_url": "https://api.github.com/users/alexcoca/orgs",
    "repos_url": "https://api.github.com/users/alexcoca/repos",
    "events_url": "https://api.github.com/users/alexcoca/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexcoca/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2020-04-13T18:08:03Z",
  "updated_at": "2021-07-13T08:57:26Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi @slundberg ,\r\n\r\nI hope you are well. I was playing with the TreeExplainer and thought of checking the local accuracy property, which did not hold. I know previous issues were related to a tight tolerance in the `assert_additivity` method of `TreeExplainer`, but now this seems to happen silently (I only noticed this because I thought of checking myself).\r\n\r\nI used the `Census income classification with XGBoost` example in your library to create a reproducible example. You can copy paste the code below in the `Explain predictions` section to reproduce the error.\r\n\r\n\r\n```python\r\nimport pandas as pd\r\nfrom scipy.special import logit\r\n\r\nprint(\"Shap version\", shap.__version__)\r\nprint(\"\")\r\n# prepare data\r\nR=200     # background size\r\nn_exp=50  # number of instances to explain\r\nX_explain = X_test[:n_exp]\r\nprint(\"Explanation set shape:\", X_explain.shape)\r\nbackground_dataset = pd.DataFrame(X_train.iloc[:R, :])\r\nprint(\"Background set shape:\", background_dataset.shape)\r\n\r\n# explain some examples \r\nnew_explainer = shap.TreeExplainer(model, data=background_dataset)\r\nexplanations = new_explainer.shap_values(X_explain)\r\n\r\nprint(\"\")\r\n# basic expected value checks\r\nprint(\"Expected value\", new_explainer.expected_value)\r\nprint(\"base score\", params['base_score'])\r\ncheck_expected = logit(model.predict(xgboost.DMatrix(background_dataset))).mean()\r\n# check the expected value is the average predictn\r\nassert np.abs(check_expected) - np.abs(new_explainer.expected_value) < 1e-4\r\n\r\nprint(\"\")\r\n# check local accuracy\r\nactual = explanations.sum(1)\r\nexpected = logit(model.predict(xgboost.DMatrix(X_test[:n_exp]))) - new_explainer.expected_value \r\nabsolute_error = np.abs(actual - expected)\r\ni_max = np.argmax(absolute_error)\r\nrelative_error = np.abs(100*(actual[i_max] - expected[i_max])/expected[i_max])\r\nprint(\"Max Absolute error: {}\".format(absolute_error[i_max]))\r\nprint(\"Relative error: {} %.\".format(np.round(relative_error, 4)))\r\nnew_explainer.assert_additivity(explanations, model.predict(xgboost.DMatrix(X_explain), output_margin=True))\r\n```\r\n\r\nThis gives the following output:\r\n![image](https://user-images.githubusercontent.com/30216068/79213702-85bdbd80-7e41-11ea-8d32-f06f7851fe08.png)\r\n\r\n\r\n\r\nGiven that we are explaining the model in the margin space, we expect the local accuracy to hold exactly. Do you think this is an `xbgoost` specific error? To me, the error looks a bit large to be just a consequence of rounding. Any insights into this are much appreciated. \r\n\r\nI should mention that other issues such as #887 #941, #903, #1096 and  #1105 seem to relate to the same issue.\r\n\r\n**UPDATE**\r\n\r\nI thought of checking what happens if we run this check at instance level. So I split the above background dataset and checked local accuracy, for every instance, across a range of references.\r\n\r\nThe two plots below are as expected, since the model output can vary singificantly with the reference.\r\n\r\n![image](https://user-images.githubusercontent.com/30216068/79239690-c54bd000-7e68-11ea-8e6b-6249924109a2.png)\r\n![image](https://user-images.githubusercontent.com/30216068/79239814-e9a7ac80-7e68-11ea-9c46-5a9a944345fb.png)\r\n\r\nBelow, the absolute error computed from the above expected and actual sums is ploted:\r\n\r\n![image](https://user-images.githubusercontent.com/30216068/79240097-3d19fa80-7e69-11ea-9cbc-c4e2ca043ef5.png)\r\n\r\nYou can find the code required to reproduce the error and my analysis in `notebooks/tree_explainer` [here](https://github.com/alexcoca/shap/tree/local_accuracy_check/notebooks/tree_explainer). \r\n\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/1151/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/1151/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
