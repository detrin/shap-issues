{
  "url": "https://api.github.com/repos/shap/shap/issues/805",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/805/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/805/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/805/events",
  "html_url": "https://github.com/shap/shap/issues/805",
  "id": 492186368,
  "node_id": "MDU6SXNzdWU0OTIxODYzNjg=",
  "number": 805,
  "title": "Brute Force linear explainer implementation",
  "user": {
    "login": "steremma",
    "id": 9283299,
    "node_id": "MDQ6VXNlcjkyODMyOTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/9283299?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/steremma",
    "html_url": "https://github.com/steremma",
    "followers_url": "https://api.github.com/users/steremma/followers",
    "following_url": "https://api.github.com/users/steremma/following{/other_user}",
    "gists_url": "https://api.github.com/users/steremma/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/steremma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/steremma/subscriptions",
    "organizations_url": "https://api.github.com/users/steremma/orgs",
    "repos_url": "https://api.github.com/users/steremma/repos",
    "events_url": "https://api.github.com/users/steremma/events{/privacy}",
    "received_events_url": "https://api.github.com/users/steremma/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-09-11T11:45:27Z",
  "updated_at": "2021-02-05T23:24:49Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hello.\r\n\r\nIn order to get an indication of how well the sampling approximation works as a function of `nsamples` in the `LinearExplainer`, I decided to calculate the pure shapley values using a brute force approach. I noticed a `ToDo` comment proposing exactly this approach for the case where `nsamples` is actually larger than the number of possible coalitions and would therefore be happy to submit a PR once its done.\r\n\r\nHowever I have had some trouble understanding the `_estimate_transforms` method. Issue #573 seems to ask a similar question but is as of now unaddressed. I could submit a [WIP] PR to initiate some discussion but it would also be really helpful to get a reference for that method (be it a paper or an informal write-up). I did check several related papers including the [NIPS](https://papers.nips.cc/paper/7062-a-unified-approach-to-interpreting-model-predictions.pdf) one but there is nothing about linear models that consider correlation of input features. For example **section 4.2** of the linked paper only considers the independent case.\r\n\r\n\r\n@slundberg since you are the author of the function is question (as well as the paper) maybe you could shed some light into this? Thanks in advance!\r\n\r\n## EDIT: Potential Issue in the existing estimation\r\n\r\nBy going through the existing estimation code I observed that smaller coalitions have a greater effect on the estimation than larger ones. Please correct me if I am wrong but here is the reasoning:\r\n\r\nEach of `nsamples` iterations will start with a coalition of size `1`, then build up towards bigger ones. So there is an equal additive effect on the estimation coming from coalitions of size `1`, as from coalitions of arbitrary size `s >> 1`. However this is not true for the number of unique coalitions. For example, if we have `10` features, then there are `10` coalitions of size `1` but `252` coalitions of size `5`. Therefore those coalitions of size `5` have individually a much smaller effect on the estimation than the coalitions of size `1` (some of them might never be explored when `nsamples` is small). This discrepancy will of course get much larger when `M` increases arbitrarily.\r\n\r\nThis could be a desired effect if we consider very small and very large coalitions more important (I have some intuition that supports this but can't quite formulate it yet). Since we currently lack documentation I am not sure that this is a feature and not a bug. ",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/805/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/805/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
