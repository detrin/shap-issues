{
  "url": "https://api.github.com/repos/shap/shap/issues/2332",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/2332/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/2332/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/2332/events",
  "html_url": "https://github.com/shap/shap/issues/2332",
  "id": 1085340701,
  "node_id": "I_kwDOBHDcK85AsPwd",
  "number": 2332,
  "title": "Using SHAP with pycaret isolation forest.",
  "user": {
    "login": "sorenwacker",
    "id": 3391614,
    "node_id": "MDQ6VXNlcjMzOTE2MTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3391614?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sorenwacker",
    "html_url": "https://github.com/sorenwacker",
    "followers_url": "https://api.github.com/users/sorenwacker/followers",
    "following_url": "https://api.github.com/users/sorenwacker/following{/other_user}",
    "gists_url": "https://api.github.com/users/sorenwacker/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sorenwacker/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sorenwacker/subscriptions",
    "organizations_url": "https://api.github.com/users/sorenwacker/orgs",
    "repos_url": "https://api.github.com/users/sorenwacker/repos",
    "events_url": "https://api.github.com/users/sorenwacker/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sorenwacker/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2021-12-21T01:16:34Z",
  "updated_at": "2021-12-21T03:34:47Z",
  "closed_at": "2021-12-21T03:34:47Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I am trying to use SHAP with isolation forest model generated with pycaret. I can create the waterfall plot and other plots, but the results are a bit counterintuitive. \r\n\r\n\r\n```\r\n# the pycaret code\r\n\r\n_ = setup(df_train, silent=True, ignore_low_variance=True, remove_perfect_collinearity=True)\r\nmodel = create_model('iforest')\r\ndf_pred = predict_model(model, df_all)\r\n```\r\n\r\n\r\n```\r\nclass ShapAnalysis():\r\n    \r\n    def __init__(self, model, df):\r\n        explainer = shap.Explainer(model)\r\n        shap_values = explainer(df)\r\n        self._shap_values = shap_values\r\n        self._instance_names = df.index.to_list()\r\n        self._feature_names = df.columns.to_list()\r\n        self.df_shap = pd.DataFrame(\r\n            shap_values.values, \r\n            columns=df.columns, \r\n            index=df.index\r\n        )\r\n        \r\n    def waterfall(self, i, **kwargs):\r\n        shap_values = self._shap_values\r\n        shap_object = shap.Explanation(\r\n                base_values = shap_values[i][0].base_values, \r\n                values = shap_values[i].values,\r\n                feature_names = self._feature_names,\r\n                instance_names=self._instance_names,\r\n                data = shap_values[i].data,\r\n        )\r\n        shap.plots.waterfall(shap_object, **kwargs)\r\n        \r\n    def summary(self, **kwargs):\r\n        shap.summary_plot(self._shap_values, **kwargs)\r\n        \r\n    def bar(self, **kwargs):\r\n        shap.plots.bar(self._shap_values, **kwargs)    \r\n        for ax in plt.gcf().axes:\r\n            for ch in ax.get_children():\r\n                try:\r\n                    ch.set_color(\"0.3\")\r\n                except:\r\n                    break\r\n```\r\n\r\nTo calculate the shapley values I create a dataset that is sorted by the anomaly score.\r\n\r\n\r\n    df_pred = predict_model(model, df_all).sort_values('Anomaly_Score')\r\n\r\n![image](https://user-images.githubusercontent.com/3391614/146854866-d9f48a94-85f0-4e96-b46b-24f83871389a.png)\r\n\r\n\r\nThis way the rows that are predicted to be normal come first and the predicted anomalies come last. \r\n\r\nHowever, when I then look into the waterfall plot for the first and the last row, they are almost identical. \r\n\r\n```\r\nsa = ShapAnalysis(model, df_pred)\r\nsa.waterfall(0)\r\nsa.waterfall(860)\r\n\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/3391614/146854221-98935b33-1c6a-425f-8f3b-d5a3d5f1a9d3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3391614/146854241-a1bd86f0-7764-4dc5-bd21-f8fd8c3beb0b.png)\r\n\r\n\r\nAnd the values do not seem to correspond to the model output. I am not sure if I do something wrong with the shap values, especially the indices to use are a bit cryptic to me. Or whether the pycaret model needs some kind of abstraction layer. I noted not all pycaret models work well with shap. ",
  "closed_by": {
    "login": "sorenwacker",
    "id": 3391614,
    "node_id": "MDQ6VXNlcjMzOTE2MTQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3391614?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sorenwacker",
    "html_url": "https://github.com/sorenwacker",
    "followers_url": "https://api.github.com/users/sorenwacker/followers",
    "following_url": "https://api.github.com/users/sorenwacker/following{/other_user}",
    "gists_url": "https://api.github.com/users/sorenwacker/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sorenwacker/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sorenwacker/subscriptions",
    "organizations_url": "https://api.github.com/users/sorenwacker/orgs",
    "repos_url": "https://api.github.com/users/sorenwacker/repos",
    "events_url": "https://api.github.com/users/sorenwacker/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sorenwacker/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/2332/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/2332/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
