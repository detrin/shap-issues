{
  "url": "https://api.github.com/repos/shap/shap/issues/761",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/761/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/761/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/761/events",
  "html_url": "https://github.com/shap/shap/issues/761",
  "id": 482276789,
  "node_id": "MDU6SXNzdWU0ODIyNzY3ODk=",
  "number": 761,
  "title": "CatBoost with nan values not supported",
  "user": {
    "login": "lrq3000",
    "id": 1118942,
    "node_id": "MDQ6VXNlcjExMTg5NDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1118942?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lrq3000",
    "html_url": "https://github.com/lrq3000",
    "followers_url": "https://api.github.com/users/lrq3000/followers",
    "following_url": "https://api.github.com/users/lrq3000/following{/other_user}",
    "gists_url": "https://api.github.com/users/lrq3000/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lrq3000/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lrq3000/subscriptions",
    "organizations_url": "https://api.github.com/users/lrq3000/orgs",
    "repos_url": "https://api.github.com/users/lrq3000/repos",
    "events_url": "https://api.github.com/users/lrq3000/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lrq3000/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-08-19T12:14:48Z",
  "updated_at": "2020-02-05T17:20:08Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "I just tried the very last commit from the github, and I tried to use shap on a catboost classifier model with categorical features and float ones, and with missing, nan values in some of the floats columns. Shap is unfortunately choking.\r\n\r\nHere is my code:\r\n```\r\nexplainer = shap.TreeExplainer(model, X_train)\r\nshap_values = explainer.shap_values(X_train)\r\n```\r\n\r\nHere is the output:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-105-462755477be2> in <module>\r\n----> 1 explainer = shap.TreeExplainer(model, X_train)\r\n      2 shap_values = explainer.shap_values(X_train)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\tree.py in __init__(self, model, data, model_output, feature_dependence)\r\n     96         else:\r\n     97             self.data = data\r\n---> 98         self.data_missing = None if self.data is None else np.isnan(self.data)\r\n     99         self.model_output = model_output\r\n    100         self.feature_dependence = feature_dependence\r\n\r\nTypeError: ufunc 'isnan' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n\r\nIf I use the `approximate=True` argument for `explainer.shap_values()`, I get the following error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-137-3e443042e22d> in <module>\r\n----> 1 explainer = shap.TreeExplainer(model)\r\n      2 shap_values = explainer.shap_values(X_train2, approximate=True)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\tree.py in __init__(self, model, data, model_output, feature_dependence)\r\n    100         self.feature_dependence = feature_dependence\r\n    101         self.expected_value = None\r\n--> 102         self.model = TreeEnsemble(model, self.data, self.data_missing)\r\n    103 \r\n    104         assert feature_dependence in feature_dependence_codes, \"Invalid feature_dependence option!\"\r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\tree.py in __init__(self, model, data, data_missing)\r\n    628             self.dtype = np.float32\r\n    629             cb_loader = CatBoostTreeModelLoader(model)\r\n--> 630             self.trees = cb_loader.get_trees(data=data, data_missing=data_missing)\r\n    631             self.tree_output = \"log_odds\"\r\n    632             self.objective = \"binary_crossentropy\"\r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\tree.py in get_trees(self, data, data_missing)\r\n   1202 \r\n   1203             # load the per-tree params\r\n-> 1204             depth = len(self.loaded_cb_model['oblivious_trees'][tree_index]['splits'])\r\n   1205 \r\n   1206             # load the nodes\r\n\r\nTypeError: object of type 'NoneType' has no len()\r\n```\r\n\r\nI also tried with a KernelExplainer instead of TreeExplainer, I get a similar but not exactly same error:\r\n\r\nCode:\r\n```\r\nexplainer = shap.KernelExplainer(model.predict_proba, X_train)\r\nshap_values = explainer.shap_values(X_train)\r\n```\r\n\r\nError:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-103-12524d6e96e8> in <module>\r\n      4 explainer = shap.KernelExplainer(model.predict_proba, X_train)\r\n----> 5 shap_values = explainer.shap_values(X_train)\r\n      6 #shap_values = model.get_feature_importance(catboost.Pool(X_train, y_train, cat_features=categorical_columns), type='ShapValues')\r\n      7 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\kernel.py in shap_values(self, X, **kwargs)\r\n    207                 if self.keep_index:\r\n    208                     data = convert_to_instance_with_index(data, column_name, index_value[i:i + 1], index_name)\r\n--> 209                 explanations.append(self.explain(data, **kwargs))\r\n    210 \r\n    211             # vector-output\r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\kernel.py in explain(self, incoming_instance, **kwargs)\r\n    232         # find the feature groups we will test. If a feature does not change from its\r\n    233         # current value then we know it doesn't impact the model\r\n--> 234         self.varyingInds = self.varying_groups(instance.x)\r\n    235         if self.data.groups is None:\r\n    236             self.varyingFeatureGroups = np.array([i for i in self.varyingInds])\r\n\r\n~\\Anaconda3\\lib\\site-packages\\shap\\explainers\\kernel.py in varying_groups(self, x)\r\n    424                         continue\r\n    425                     x_group = x_group.todense()\r\n--> 426                 num_mismatches = np.sum(np.invert(np.isclose(x_group, self.data.data[:, inds], equal_nan=True)))\r\n    427                 varying[i] = num_mismatches > 0\r\n    428             varying_indices = np.nonzero(varying)[0]\r\n\r\n<__array_function__ internals> in isclose(*args, **kwargs)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\numpy\\core\\numeric.py in isclose(a, b, rtol, atol, equal_nan)\r\n   2267     y = array(y, dtype=dt, copy=False, subok=True)\r\n   2268 \r\n-> 2269     xfin = isfinite(x)\r\n   2270     yfin = isfinite(y)\r\n   2271     if all(xfin) and all(yfin):\r\n\r\nTypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n\r\nAny help on this would be greatly appreciated! Thank you in advance!",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/761/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/761/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
