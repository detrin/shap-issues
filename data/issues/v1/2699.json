{
  "url": "https://api.github.com/repos/shap/shap/issues/2699",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/2699/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/2699/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/2699/events",
  "html_url": "https://github.com/shap/shap/issues/2699",
  "id": 1381798372,
  "node_id": "I_kwDOBHDcK85SXJHk",
  "number": 2699,
  "title": "Symmetrical SHAP array shape fails to slice on feature names (e.g., shap_values[:,\"feature_1\"])",
  "user": {
    "login": "MichaelSenescall",
    "id": 84549846,
    "node_id": "MDQ6VXNlcjg0NTQ5ODQ2",
    "avatar_url": "https://avatars.githubusercontent.com/u/84549846?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MichaelSenescall",
    "html_url": "https://github.com/MichaelSenescall",
    "followers_url": "https://api.github.com/users/MichaelSenescall/followers",
    "following_url": "https://api.github.com/users/MichaelSenescall/following{/other_user}",
    "gists_url": "https://api.github.com/users/MichaelSenescall/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MichaelSenescall/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MichaelSenescall/subscriptions",
    "organizations_url": "https://api.github.com/users/MichaelSenescall/orgs",
    "repos_url": "https://api.github.com/users/MichaelSenescall/repos",
    "events_url": "https://api.github.com/users/MichaelSenescall/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MichaelSenescall/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 486901329,
      "node_id": "MDU6TGFiZWw0ODY5MDEzMjk=",
      "url": "https://api.github.com/repos/shap/shap/labels/bug",
      "name": "bug",
      "color": "ee0701",
      "default": true,
      "description": "Indicates an unexpected problem or unintended behaviour"
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/shap/shap/milestones/2",
    "html_url": "https://github.com/shap/shap/milestone/2",
    "labels_url": "https://api.github.com/repos/shap/shap/milestones/2/labels",
    "id": 9579906,
    "node_id": "MI_kwDOBHDcK84Aki2C",
    "number": 2,
    "title": "0.43.0",
    "description": "",
    "creator": {
      "login": "thatlittleboy",
      "id": 30731072,
      "node_id": "MDQ6VXNlcjMwNzMxMDcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30731072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/thatlittleboy",
      "html_url": "https://github.com/thatlittleboy",
      "followers_url": "https://api.github.com/users/thatlittleboy/followers",
      "following_url": "https://api.github.com/users/thatlittleboy/following{/other_user}",
      "gists_url": "https://api.github.com/users/thatlittleboy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/thatlittleboy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/thatlittleboy/subscriptions",
      "organizations_url": "https://api.github.com/users/thatlittleboy/orgs",
      "repos_url": "https://api.github.com/users/thatlittleboy/repos",
      "events_url": "https://api.github.com/users/thatlittleboy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/thatlittleboy/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 10,
    "closed_issues": 23,
    "state": "open",
    "created_at": "2023-06-25T10:11:50Z",
    "updated_at": "2023-08-26T14:27:48Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 1,
  "created_at": "2022-09-22T04:09:29Z",
  "updated_at": "2023-08-22T01:18:40Z",
  "closed_at": "2023-08-22T01:18:40Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Lets say I have a pandas DataFrame that contains some features and a dependent variable...\r\n\r\ndf_testing_shap =\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nÂ index | y_val | feature_1 | feature_2 | feature_3\r\n-- | -- | -- | -- | --\r\n1 | 10.041427 | 47 | 0.434511 | 6\r\n2 | 9.841583 | 50 | 0.452915 | 9\r\n3 | 9.713457 | 34 | 0.564274 | 9\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n\r\nNow lets train our model and generate SHAP values (I am using XGBoost, make sure this is installed and imported to replicate the code)...\r\n```python\r\n# Split X and Y variables\r\ndf_x = df_testing_shap[[\"feature_1\", \"feature_2\", \"feature_3\"]]\r\ndf_y = df_testing_shap[\"y_val\"]\r\n\r\n# Train model\r\nhp_regressor = xgb.XGBRegressor()\r\nhp_regressor.fit(df_x, df_y)\r\n\r\n# Generate SHAP values\r\nexplainer = shap.Explainer(hp_regressor)\r\nshap_values = explainer(df_x)\r\n\r\n# Print shape info\r\nprint(f\"df_x shape: {df_x.shape}\")\r\nprint(f\"SHAP shape: {shap_values.shape}\")\r\n```\r\nOutput...\r\n```\r\ndf_x shape: (3, 3)\r\nSHAP shape: (3, 3)\r\n```\r\n\r\nNote that the resulting SHAP array is symmetrical (the rows and columns are equal in length). Now if we try to slice this data by one of our feature names we get an error...\r\n```python\r\nshap_values[:,\"feature_1\"]\r\n```\r\nOutput...\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n[<ipython-input-45-ac5b665a088f>](https://localhost:8080/#) in <module>\r\n----> 1 shap_values[:,\"feature_1\"]\r\n\r\n[/usr/local/lib/python3.7/dist-packages/shap/_explanation.py](https://localhost:8080/#) in __getitem__(self, item)\r\n    419         if new_self is None:\r\n    420             new_self = copy.copy(self)\r\n--> 421         new_self._s = new_self._s.__getitem__(item)\r\n    422         new_self.op_history.append({\r\n    423             \"name\": \"__getitem__\",\r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer.py](https://localhost:8080/#) in __getitem__(self, item)\r\n    110                 index_slicer = AtomicSlicer(index_tup, max_dim=1)\r\n    111                 slicer_index = index_slicer[tracked.dim]\r\n--> 112                 sliced_o = tracked[slicer_index]\r\n    113                 sliced_dim = resolve_dim(index_tup, tracked.dim)\r\n    114 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in __getitem__(self, item)\r\n     67 \r\n     68         # Slice according to object type.\r\n---> 69         return UnifiedDataHandler.slice(self.o, index_tup, self.max_dim)\r\n     70 \r\n     71 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in slice(cls, o, index_tup, max_dim)\r\n    581 \r\n    582         is_element, sliced_o, cut = head_slice(o, index_tup, max_dim)\r\n--> 583         out = tail_slice(sliced_o, index_tup[cut:], max_dim - cut, is_element)\r\n    584         return out\r\n    585 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in tail_slice(cls, o, tail_index, max_dim, flatten)\r\n    437                 return AtomicSlicer(o, max_dim=max_dim)[tail_index]\r\n    438         else:\r\n--> 439             inner = [AtomicSlicer(e, max_dim=max_dim)[tail_index] for e in o]\r\n    440             if _safe_isinstance(o, \"numpy\", \"ndarray\"):\r\n    441                 import numpy\r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in <listcomp>(.0)\r\n    437                 return AtomicSlicer(o, max_dim=max_dim)[tail_index]\r\n    438         else:\r\n--> 439             inner = [AtomicSlicer(e, max_dim=max_dim)[tail_index] for e in o]\r\n    440             if _safe_isinstance(o, \"numpy\", \"ndarray\"):\r\n    441                 import numpy\r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in __getitem__(self, item)\r\n     67 \r\n     68         # Slice according to object type.\r\n---> 69         return UnifiedDataHandler.slice(self.o, index_tup, self.max_dim)\r\n     70 \r\n     71 \r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in slice(cls, o, index_tup, max_dim)\r\n    580         tail_slice = cls.type_map[o_type].tail_slice\r\n    581 \r\n--> 582         is_element, sliced_o, cut = head_slice(o, index_tup, max_dim)\r\n    583         out = tail_slice(sliced_o, index_tup[cut:], max_dim - cut, is_element)\r\n    584         return out\r\n\r\n[/usr/local/lib/python3.7/dist-packages/slicer/slicer_internal.py](https://localhost:8080/#) in head_slice(cls, o, index_tup, max_dim)\r\n    416         cut_index = index_tup[:cut]\r\n    417         is_element = any([True if isinstance(x, int) else False for x in cut_index])\r\n--> 418         sliced_o = o[cut_index]\r\n    419 \r\n    420         return is_element, sliced_o, cut\r\n\r\nIndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices\r\n```\r\n\r\nThe error seems to be in the `__getitem__` method from the `shap._explanation.Explanation` class. I have tried to monkey patch this class with some debugging code, but without prior knowledge of this method I think it would take quite a while to get to the bottom of this.\r\n\r\nAs a workaround, it should be easy enough to build a DataFrame containing the SHAP values with columns set to feature names, then I can make whatever selections I want. But I think it would be better to have a proper fix so I can continue to use the built-in plots and what not.\r\n\r\nAny ideas on this one? - Thanks in advance!",
  "closed_by": {
    "login": "thatlittleboy",
    "id": 30731072,
    "node_id": "MDQ6VXNlcjMwNzMxMDcy",
    "avatar_url": "https://avatars.githubusercontent.com/u/30731072?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thatlittleboy",
    "html_url": "https://github.com/thatlittleboy",
    "followers_url": "https://api.github.com/users/thatlittleboy/followers",
    "following_url": "https://api.github.com/users/thatlittleboy/following{/other_user}",
    "gists_url": "https://api.github.com/users/thatlittleboy/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thatlittleboy/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thatlittleboy/subscriptions",
    "organizations_url": "https://api.github.com/users/thatlittleboy/orgs",
    "repos_url": "https://api.github.com/users/thatlittleboy/repos",
    "events_url": "https://api.github.com/users/thatlittleboy/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thatlittleboy/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/2699/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/2699/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
