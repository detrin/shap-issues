{
  "url": "https://api.github.com/repos/shap/shap/issues/971",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/971/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/971/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/971/events",
  "html_url": "https://github.com/shap/shap/issues/971",
  "id": 542122263,
  "node_id": "MDU6SXNzdWU1NDIxMjIyNjM=",
  "number": 971,
  "title": "\"ValueError: minvalue must be less than or equal to maxvalue\" when calling summary_plot",
  "user": {
    "login": "daanpdebruin",
    "id": 30701176,
    "node_id": "MDQ6VXNlcjMwNzAxMTc2",
    "avatar_url": "https://avatars.githubusercontent.com/u/30701176?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/daanpdebruin",
    "html_url": "https://github.com/daanpdebruin",
    "followers_url": "https://api.github.com/users/daanpdebruin/followers",
    "following_url": "https://api.github.com/users/daanpdebruin/following{/other_user}",
    "gists_url": "https://api.github.com/users/daanpdebruin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/daanpdebruin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/daanpdebruin/subscriptions",
    "organizations_url": "https://api.github.com/users/daanpdebruin/orgs",
    "repos_url": "https://api.github.com/users/daanpdebruin/repos",
    "events_url": "https://api.github.com/users/daanpdebruin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/daanpdebruin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-12-24T13:00:38Z",
  "updated_at": "2022-04-16T19:47:34Z",
  "closed_at": "2019-12-24T13:12:25Z",
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "This can happens when all shap_values of a feature are equal.\r\n\r\nIn summary_plot vmin and vmax are calculated like this:\r\n\r\n`vmin = np.nanpercentile(values, 5)`\r\n`vmax = np.nanpercentile(values, 95)`\r\n\r\nThis results in vmin being equal to vmax when all values are equal. However due to rounding differences, sometimes vmin > vmax at ~ the 10th decimal place. This results in matplotlib colors error\r\nWould be solved by rounding vmin and vmax to a certain number of digits (for example 5)\r\n\r\n```\r\nValueError                                Traceback (most recent call last)\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/IPython/core/formatters.py in __call__(self, obj)\r\n    339                 pass\r\n    340             else:\r\n--> 341                 return printer(obj)\r\n    342             # Finally look for special method names\r\n    343             method = get_real_method(obj, self.print_method)\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/IPython/core/pylabtools.py in <lambda>(fig)\r\n    242 \r\n    243     if 'png' in formats:\r\n--> 244         png_formatter.for_type(Figure, lambda fig: print_figure(fig, 'png', **kwargs))\r\n    245     if 'retina' in formats or 'png2x' in formats:\r\n    246         png_formatter.for_type(Figure, lambda fig: retina_figure(fig, **kwargs))\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs)\r\n    126 \r\n    127     bytes_io = BytesIO()\r\n--> 128     fig.canvas.print_figure(bytes_io, **kw)\r\n    129     data = bytes_io.getvalue()\r\n    130     if fmt == 'svg':\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\r\n   2054                         orientation=orientation,\r\n   2055                         dryrun=True,\r\n-> 2056                         **kwargs)\r\n   2057                     renderer = self.figure._cachedRenderer\r\n   2058                     bbox_artists = kwargs.pop(\"bbox_extra_artists\", None)\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py in print_png(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\r\n    525 \r\n    526         else:\r\n--> 527             FigureCanvasAgg.draw(self)\r\n    528             renderer = self.get_renderer()\r\n    529             with cbook._setattr_cm(renderer, dpi=self.figure.dpi), \\\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py in draw(self)\r\n    386         self.renderer = self.get_renderer(cleared=True)\r\n    387         with RendererAgg.lock:\r\n--> 388             self.figure.draw(self.renderer)\r\n    389             # A GUI class may be need to update a window using this draw, so\r\n    390             # don't forget to call the superclass.\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\r\n     36                 renderer.start_filter()\r\n     37 \r\n---> 38             return draw(artist, renderer, *args, **kwargs)\r\n     39         finally:\r\n     40             if artist.get_agg_filter() is not None:\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/figure.py in draw(self, renderer)\r\n   1707             self.patch.draw(renderer)\r\n   1708             mimage._draw_list_compositing_images(\r\n-> 1709                 renderer, self, artists, self.suppressComposite)\r\n   1710 \r\n   1711             renderer.close_group('figure')\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)\r\n    133     if not_composite or not has_images:\r\n    134         for a in artists:\r\n--> 135             a.draw(renderer)\r\n    136     else:\r\n    137         # Composite any adjacent images together\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\r\n     36                 renderer.start_filter()\r\n     37 \r\n---> 38             return draw(artist, renderer, *args, **kwargs)\r\n     39         finally:\r\n     40             if artist.get_agg_filter() is not None:\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/axes/_base.py in draw(self, renderer, inframe)\r\n   2645             renderer.stop_rasterizing()\r\n   2646 \r\n-> 2647         mimage._draw_list_compositing_images(renderer, self, artists)\r\n   2648 \r\n   2649         renderer.close_group('axes')\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)\r\n    133     if not_composite or not has_images:\r\n    134         for a in artists:\r\n--> 135             a.draw(renderer)\r\n    136     else:\r\n    137         # Composite any adjacent images together\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\r\n     36                 renderer.start_filter()\r\n     37 \r\n---> 38             return draw(artist, renderer, *args, **kwargs)\r\n     39         finally:\r\n     40             if artist.get_agg_filter() is not None:\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/collections.py in draw(self, renderer)\r\n    864     def draw(self, renderer):\r\n    865         self.set_sizes(self._sizes, self.figure.dpi)\r\n--> 866         Collection.draw(self, renderer)\r\n    867 \r\n    868 \r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\r\n     36                 renderer.start_filter()\r\n     37 \r\n---> 38             return draw(artist, renderer, *args, **kwargs)\r\n     39         finally:\r\n     40             if artist.get_agg_filter() is not None:\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/collections.py in draw(self, renderer)\r\n    253         renderer.open_group(self.__class__.__name__, self.get_gid())\r\n    254 \r\n--> 255         self.update_scalarmappable()\r\n    256 \r\n    257         transform, transOffset, offsets, paths = self._prepare_points()\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/collections.py in update_scalarmappable(self)\r\n    761             return\r\n    762         if self._is_filled:\r\n--> 763             self._facecolors = self.to_rgba(self._A, self._alpha)\r\n    764         elif self._is_stroked:\r\n    765             self._edgecolors = self.to_rgba(self._A, self._alpha)\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/cm.py in to_rgba(self, x, alpha, bytes, norm)\r\n    287         x = ma.asarray(x)\r\n    288         if norm:\r\n--> 289             x = self.norm(x)\r\n    290         rgba = self.cmap(x, alpha=alpha, bytes=bytes)\r\n    291         return rgba\r\n~/.conda/envs/project-cards/lib/python3.6/site-packages/matplotlib/colors.py in __call__(self, value, clip)\r\n    962             result.fill(0)   # Or should it be all masked?  Or 0.5?\r\n    963         elif vmin > vmax:\r\n--> 964             raise ValueError(\"minvalue must be less than or equal to maxvalue\")\r\n    965         else:\r\n    966             if clip:\r\nValueError: minvalue must be less than or equal to maxvalue\r\n```\r\n",
  "closed_by": {
    "login": "daanpdebruin",
    "id": 30701176,
    "node_id": "MDQ6VXNlcjMwNzAxMTc2",
    "avatar_url": "https://avatars.githubusercontent.com/u/30701176?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/daanpdebruin",
    "html_url": "https://github.com/daanpdebruin",
    "followers_url": "https://api.github.com/users/daanpdebruin/followers",
    "following_url": "https://api.github.com/users/daanpdebruin/following{/other_user}",
    "gists_url": "https://api.github.com/users/daanpdebruin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/daanpdebruin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/daanpdebruin/subscriptions",
    "organizations_url": "https://api.github.com/users/daanpdebruin/orgs",
    "repos_url": "https://api.github.com/users/daanpdebruin/repos",
    "events_url": "https://api.github.com/users/daanpdebruin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/daanpdebruin/received_events",
    "type": "User",
    "site_admin": false
  },
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/971/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/971/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
