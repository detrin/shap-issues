{
  "url": "https://api.github.com/repos/shap/shap/issues/1311",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/1311/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/1311/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/1311/events",
  "html_url": "https://github.com/shap/shap/issues/1311",
  "id": 654833126,
  "node_id": "MDU6SXNzdWU2NTQ4MzMxMjY=",
  "number": 1311,
  "title": "Use SHAP to make sense on misclassified predictions",
  "user": {
    "login": "FernandoDoreto",
    "id": 50838066,
    "node_id": "MDQ6VXNlcjUwODM4MDY2",
    "avatar_url": "https://avatars.githubusercontent.com/u/50838066?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/FernandoDoreto",
    "html_url": "https://github.com/FernandoDoreto",
    "followers_url": "https://api.github.com/users/FernandoDoreto/followers",
    "following_url": "https://api.github.com/users/FernandoDoreto/following{/other_user}",
    "gists_url": "https://api.github.com/users/FernandoDoreto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/FernandoDoreto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/FernandoDoreto/subscriptions",
    "organizations_url": "https://api.github.com/users/FernandoDoreto/orgs",
    "repos_url": "https://api.github.com/users/FernandoDoreto/repos",
    "events_url": "https://api.github.com/users/FernandoDoreto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/FernandoDoreto/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2020-07-10T14:45:50Z",
  "updated_at": "2020-07-10T14:45:50Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi all,\r\n\r\n### I am failing to understand how to use SHAP to discover insights for misclassified predictions. \r\n* Let's take breast_cancer toy dataset, create a model, and evaluate misclassified predictions, so I can have the insight of which features affect the most the wrong predictions on each class.\r\n* Once I have these insights, I want to be able to investigate/correlate/understand how **I could tweak my model to improve performance**.\r\n* So a hypothetical example, maybe in breast_cancer dataset I would conclude that Worst Area is influencing misclassification for class 0, so I would investigate this feature - maybe use a feature engineering technique\r\n\r\n\r\n\r\n**How do you guys tpyically deal when analyzing SHAP values on misclassified (and properly classified) predictions?**\r\n\r\n\r\n\r\n\r\nCode\r\n\r\n\r\n* I used jupyter notebook and versions are scikit-learn==0.23.1, shap==0.32.0, python 3.7.4\r\n\r\n```\r\nfrom sklearn.datasets import load_breast_cancer\r\ndata = load_breast_cancer()\r\ndf = pd.DataFrame(data.data, columns=data.feature_names)\r\ndf['target'] = pd.Series(data.target)#\r\ntarget = 'target'\r\n\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(df.drop([target],axis=1), \r\n                                                    df[target],\r\n                                                    test_size=.2, random_state=0) \r\nprint('\\ny_train target count:\\n',y_train.value_counts()) \r\n# for simplicity, lets disconsider classes are imbalanced and lets not scale the features\r\n\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nclf = RandomForestClassifier(n_estimators=200,\r\n                             max_depth=2,\r\n                             random_state=0) \r\nclf.fit(X_train, y_train)\r\npred = clf.predict(X_train)\r\n```\r\n\r\nConfusion Matrix (actual values on Xaxis and Predictions on Yaxis\r\n[[45  2]\r\n [ 2 65]]\r\n\r\n\r\n```\r\nimport shap\r\nshap.initjs()\r\nexplainer = shap.TreeExplainer(clf)\r\n\r\n# Variable Importance Plot â€” Global Interpretability\r\n# top3: Worst Concave points, worst perimeters, worst radium\r\nshap.summary_plot(shap_values, X_train)\r\n\r\n\r\n# here I figured out the indices with misclassified datapoints, \r\n# I will not post the code since it is not the main aspect on the topic\r\n# Class  0 - 2  misclassified datapoints: Indices on X_test: [40, 73]\r\n# Class  1 - 2  misclassified datapoints: Indices on X_test:  [10, 13]\r\n\r\n\r\n# Check given datapoint\r\nindex = 40   # here you input the indeces [40, 73] and [10, 13]\r\nprint('Actual value',y_test.iloc[index])\r\nprint('Predicted value ',y_pred[index])\r\ndisplay(X_test.iloc[[index]])\r\n\r\nshap_values_local =  explainer.shap_values(X_test.iloc[[index]])\r\n# explains prediction probability for each class\r\nfor x in list(set(y_test)):\r\n    print('Class ',x)\r\n    display(shap.force_plot(explainer.expected_value[x], \r\n                            shap_values_local[x], \r\n                            X_test.iloc[[index]])\r\n           )\r\n\r\n```\r\n\r\n* Result for index = 40\r\n\r\n![shap](https://user-images.githubusercontent.com/50838066/87163570-7672d280-c2bf-11ea-900f-c9ed5fed7b3b.png)\r\n\r\n\r\n---\r\n\r\n\r\n\r\n\r\n\r\n\r\n## If I do a Shap Decision Plot, for the misclassified predictions on class 0 :\r\n* 2  misclassified datapoints: Indices on X_test:  Int64Index([40, 73], dtype='int64')\r\n\r\n### Model output values for probab of being  0 (they are low, should be high)\r\n![download](https://user-images.githubusercontent.com/50838066/87166381-6826b580-c2c3-11ea-9776-7cebe64cfd4a.png)\r\n\r\n\r\n\r\n### Model output valuesfor probab of being  1 (they are high, should be low)\r\n![download (1)](https://user-images.githubusercontent.com/50838066/87166414-7248b400-c2c3-11ea-9d7f-fc6fda54b7e3.png)\r\n\r\n\r\n### Ok, We can see which features affected when class 0 was misclassified, but what to do from here?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/1311/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/1311/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
