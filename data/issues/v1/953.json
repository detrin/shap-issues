{
  "url": "https://api.github.com/repos/shap/shap/issues/953",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/953/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/953/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/953/events",
  "html_url": "https://github.com/shap/shap/issues/953",
  "id": 537882518,
  "node_id": "MDU6SXNzdWU1Mzc4ODI1MTg=",
  "number": 953,
  "title": "TreeExplainer with scikit-learn's RandomForestClassifier throws error with sparse matrix, and with dense matrix the additivity check failed.",
  "user": {
    "login": "everdark",
    "id": 3348233,
    "node_id": "MDQ6VXNlcjMzNDgyMzM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3348233?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/everdark",
    "html_url": "https://github.com/everdark",
    "followers_url": "https://api.github.com/users/everdark/followers",
    "following_url": "https://api.github.com/users/everdark/following{/other_user}",
    "gists_url": "https://api.github.com/users/everdark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/everdark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/everdark/subscriptions",
    "organizations_url": "https://api.github.com/users/everdark/orgs",
    "repos_url": "https://api.github.com/users/everdark/repos",
    "events_url": "https://api.github.com/users/everdark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/everdark/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-12-14T08:04:48Z",
  "updated_at": "2022-12-17T17:27:21Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "```\r\nOS: Windows 10\r\nPython version: 3.6.3\r\nshap version: 0.33.0\r\nsklearn version: 0.22\r\nnumpy version: 1.17.4\r\nscipy version: 1.3.0\r\n```\r\n\r\nHere is a fully reproducible example:\r\n\r\n```python\r\nimport os\r\n\r\nimport tensorflow_datasets as tfds\r\nimport shap\r\nimport numpy as np\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.metrics import roc_auc_score\r\nfrom sklearn.model_selection import train_test_split\r\n\r\n# Directory to cache dataset.\r\nhome = os.path.expanduser(\"~\")\r\ncache_dir = os.path.join(home, \".keras\")\r\n\r\n# Load the data as tf.data.Dataset.\r\nimdb = tfds.load(name=\"imdb_reviews\", as_supervised=True,\r\n                 data_dir=os.path.join(home, \"tensorflow_datasets\"))\r\n\r\n# Extract all texts as list since we want to use libraries other than tensorflow as well.\r\n# And since this is a small dataset, we don't care about memory usage.\r\n# We skip the use of a dataset iterator.\r\nimdb_reviews_train = []\r\nimdb_reviews_test = []\r\nimdb_y_train = []\r\nimdb_y_test = []\r\nfor x, y in imdb[\"train\"].batch(128):\r\n  imdb_reviews_train.extend(x.numpy())\r\n  imdb_y_train.extend(y.numpy())\r\nfor x, y in imdb[\"test\"].batch(128):\r\n  imdb_reviews_test.extend(x.numpy())\r\n  imdb_y_test.extend(y.numpy())\r\n\r\n# TF works on bytes, but some other packages may only work on decoded string.\r\nimdb_reviews_train = [b.decode(\"utf8\") for b in imdb_reviews_train]\r\nimdb_reviews_test = [b.decode(\"utf8\") for b in imdb_reviews_test]\r\nimdb_y_train = np.array(imdb_y_train)\r\nimdb_y_test = np.array(imdb_y_test)\r\n\r\n# Take one review.\r\nprint(imdb_reviews_train[87])\r\n\r\nprint(imdb_y_train[87])  # Label. 0 as negative and 1 as positive.\r\n\r\nimdb_vectorizer = TfidfVectorizer(lowercase=True, min_df=10, max_df=.9)\r\nimdb_X_train = imdb_vectorizer.fit_transform(imdb_reviews_train)\r\nimdb_X_test = imdb_vectorizer.transform(imdb_reviews_test)\r\nprint(len(imdb_vectorizer.vocabulary_))  # Without OOV token.\r\n\r\nimdb_rf = RandomForestClassifier(n_estimators=300, random_state=64, n_jobs=-2)\r\nimdb_rf.fit(imdb_X_train, imdb_y_train)\r\n\r\nimdb_rf_pred = imdb_rf.predict(imdb_X_test)\r\nimdb_rf_yhat = imdb_rf.predict_proba(imdb_X_test)[:,1]\r\n\r\nprint(roc_auc_score(imdb_y_test, imdb_rf_yhat))\r\n\r\n\r\n# Now move on to SHAP.\r\nimdb_rf_explainer = shap.TreeExplainer(imdb_rf)\r\n\r\n# Error:\r\n# TypeError: No loop matching the specified signature and casting was found for ufunc isnan\r\nimdb_rf_shap_values = imdb_rf_explainer.shap_values(imdb_X_test[:3])\r\n\r\n# Error:\r\n# AssertionError: Additivity check failed in TreeExplainer! Please report this on GitHub. Consider retrying with the feature_perturbation='interventional' option.\r\nimdb_rf_shap_values = imdb_rf_explainer.shap_values(imdb_X_test[:3].toarray())\r\n```\r\n\r\nWhen the input to `shap_values` is a `csr_matrix`, the error is\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-21-5d9c647b9867> in <module>\r\n----> 1 imdb_rf_shap_values = imdb_rf_explainer.shap_values(imdb_X_test[:3])\r\n\r\nc:\\users\\kylec\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\shap\\explainers\\tree.py in shap_values(self, X, y, tree_limit, approximate, check_additivity)\r\n    267         if X.dtype != self.model.input_dtype:\r\n    268             X = X.astype(self.model.input_dtype)\r\n--> 269         X_missing = np.isnan(X, dtype=np.bool)\r\n    270         assert isinstance(X, np.ndarray), \"Unknown instance type: \" + str(type(X))\r\n    271         assert len(X.shape) == 2, \"Passed input data matrix X must have 1 or 2 dimensions!\"\r\n\r\nTypeError: No loop matching the specified signature and casting was found for ufunc isnan\r\n```\r\n\r\nWhen we convert it to dense matrix the additivity check then failed:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-22-2908f0b99cbd> in <module>\r\n----> 1 imdb_rf_shap_values = imdb_rf_explainer.shap_values(imdb_X_test[:3].toarray())\r\n\r\nc:\\users\\kylec\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\shap\\explainers\\tree.py in shap_values(self, X, y, tree_limit, approximate, check_additivity)\r\n    320 \r\n    321         if check_additivity and self.model_output == \"margin\":\r\n--> 322             self.assert_additivity(out, self.model.predict(X))\r\n    323 \r\n    324         return out\r\n\r\nc:\\users\\kylec\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\shap\\explainers\\tree.py in assert_additivity(self, phi, model_output)\r\n    428             for i in range(len(phi)):\r\n    429                 val = self.expected_value[i] + phi[i].sum(-1)\r\n--> 430                 assert np.max(np.abs(val - model_output[:,i]) / (np.abs(val) + 1e-4)) < 1e-2, err_msg\r\n    431         else:\r\n    432             val = self.expected_value + phi.sum(-1)\r\n\r\nAssertionError: Additivity check failed in TreeExplainer! Please report this on GitHub. Consider retrying with the feature_perturbation='interventional' option.\r\n```\r\n\r\nIf I feed exactly the same sparse matrix to a `lightgbm` model,\r\nEverything is fine.\r\nSo I think it should have something to do with the `scikit-learn` integration?",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/953/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/953/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
