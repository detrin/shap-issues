{
  "url": "https://api.github.com/repos/shap/shap/issues/2345",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/2345/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/2345/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/2345/events",
  "html_url": "https://github.com/shap/shap/issues/2345",
  "id": 1094585796,
  "node_id": "I_kwDOBHDcK85BPg3E",
  "number": 2345,
  "title": "SHAP Tree algorithm breaks Shapley symmetry property",
  "user": {
    "login": "sebconort",
    "id": 4368846,
    "node_id": "MDQ6VXNlcjQzNjg4NDY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4368846?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebconort",
    "html_url": "https://github.com/sebconort",
    "followers_url": "https://api.github.com/users/sebconort/followers",
    "following_url": "https://api.github.com/users/sebconort/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebconort/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebconort/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebconort/subscriptions",
    "organizations_url": "https://api.github.com/users/sebconort/orgs",
    "repos_url": "https://api.github.com/users/sebconort/repos",
    "events_url": "https://api.github.com/users/sebconort/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebconort/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2022-01-05T17:30:53Z",
  "updated_at": "2023-02-17T17:25:36Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Dear SHAP authors and contributors,\r\n\r\n### Introduction\r\nIn this issue, I claim that SHAP Tree algorithm presents a **strong issue** that breaks a **fundamental property** of Shapley values, the **symmetry property** also called **_equal treatment of equals_**.  \r\n\r\nThe problem comes from \"Algorithm 1\" in the paper [Consistent Individualized Feature Attribution for Tree\r\nEnsembles](https://arxiv.org/abs/1802.03888), which pretends to estimate E[ f(x) |x_s]. The algorithm is wrong, more precisely the part higlighted in yellow is wrong:\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148234974-18619f06-1df1-4564-97b7-4019da916332.png)\r\n\r\nThe topic has been discussed in the following [issue](https://github.com/christophM/interpretable-ml-book/issues/142), but :\r\n\r\n- the discussion shifted on \"true to the model\" versus \"true to the data\" debate, which is not the problem. \"tree_path_dependent\" algorithm of Shap does make sense as a kind of \"true to the data proxied by the learned tree structure\". The problem is simply that there is an error on the weights used in the algorithm.\r\n- the discussion does not propose a solution, and I do propose one here that consists on using corrected weights that can be computed with the information contained in the trees as in the current algorithm. Trees just need to be parsed more thoroughly.\r\n\r\n### Demonstration hypothesis\r\nTo demonstrate this issue, let's consider a simple model:\r\n\r\n Y = 50 * X1 + 50 * X2\r\nwhere X1 and X2 are both Bernoulli variables of parameter p1=0.5 and p2=0.5\r\n\r\nThis model is symmetrical in X1 and X2. Therefore SHAP values should be equal whatever the correlation between X1 and X2. Unfortunately, when this simple model is represented with a tree structure, and when using SHAP Tree explainer with argument 'tree_path_dependent', SHAP only gives equal SHAP values for X1 and X2 if the correlation is null.\r\n\r\n### Tree representation\r\n\r\nThe simple model considered above can be perfectly represented by a tree of depth 2. Actually, 2 different versions can be considered, depending on the order of X1 and X2 in the tree structure\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148259609-a26f326c-fd20-4857-8e13-cefdfd6bc1bb.png)\r\n\r\n\r\n### Null correlation \r\n\r\nLet's assumme corr(X1, X2) =0. Let's assume we have a training dataset of 1000 observations, with the following repartition:\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148202583-8b8d2433-38f6-4934-b308-f3781933ff20.png)\r\n\r\nThe 2 tree structures fitted on this dataset are then (with nodes populations indicated in green):\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148259562-f0100bb6-9d67-44f4-8d76-ba1f11fbbe85.png)\r\n\r\nLet's compute the SHAP values of X1 and X2 for Tree 1 and 2, for the observation x = (1,1), using  \"algorithm 1\", and using the notation  f_x(S) = E[f(x) | x_S] as in formula (2) of [Consistent Individualized Feature Attribution for Tree\r\nEnsembles](https://arxiv.org/abs/1802.03888):\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148261227-c728468e-fb4e-4fe6-bac1-281aacd88871.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148261140-c01d783c-eb6a-41e7-9f23-1a2de72fb245.png)\r\n\r\nIn  this case, the SHAP values of X1 and X2 are identical (and equal to 25), in the case of Tree 1 and Tree2. \r\n\r\n### Strictly positive correlation\r\n\r\nLet's assumme corr(X1, X2) > 0. Let's assume we have a training dataset of 1000 observations, with the following repartition:\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148236482-0ad91780-8d54-4ec9-bb66-eb48bcdb166c.png)\r\n\r\nThe 2 tree structures fitted on this dataset are then (with nodes populations indicated in green):\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148259706-bb4f7ff1-9e15-4825-869a-7943ff841987.png)\r\n\r\nLet's compute the SHAP values of X1 and X2 for Tree 1 and 2, for the observation x = (1,1), using  \"algorithm 1\", and using the notation  f_x(S) = E[f(x) | x_S] as in formula (2) of [Consistent Individualized Feature Attribution for Tree\r\nEnsembles](https://arxiv.org/abs/1802.03888):\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148260132-b8c17809-ea5e-4be7-a2bf-813f951c38d8.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148260178-6d3a7f98-9105-44a4-bb96-16e38bb4df3d.png)\r\n\r\n\r\nIn this case, SHAP values of X1 and X2 are different (equal to 17.5 and 32.5), and depend on the Tree structure 1 or 2.\r\n\r\n### Proposed solution \r\n\r\nThe problem comes from the fact that weights highlighted in purple in the tables above don't take into account the actual correlation. The actual end leaves population should be accounted for. For instance in the case of Tree 1:\r\n* the total population to take into accournt, knowing that X2=1, is not 1000 but 500\r\n* the sub population for X1 = 0 knowing that X2=1 is not 500 but 100\r\n* the sub population for X1 = 1 knowing that X2=1 is not 500 but 400\r\n\r\nThe correct SHAP value computations should then be :\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148260346-ab4479a4-bf2a-4f1f-8685-4b616098754a.png)\r\n\r\n![image](https://user-images.githubusercontent.com/4368846/148260375-c40064e4-605a-456d-83d0-65f2ca120e6d.png)\r\n\r\nNow we have SHAP values that are identical for X1 and X2 even when corr(X1, X2) <> 0.\r\n\r\n### Suggested actions\r\n\r\nI think this issue :\r\n* is of high importance and should be largely communicated to users of the library as SHAP claims to be consistent with Shapley values, in particular the symmetry property, but the \"tree_path_dependent\" algorithm is not in reality\r\n* should lead to a correction of the algorithm, with correct weights\r\n\r\nBest,",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/2345/reactions",
    "total_count": 11,
    "+1": 6,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 3,
    "eyes": 2
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/2345/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
