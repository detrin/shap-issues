{
  "url": "https://api.github.com/repos/shap/shap/issues/2768",
  "repository_url": "https://api.github.com/repos/shap/shap",
  "labels_url": "https://api.github.com/repos/shap/shap/issues/2768/labels{/name}",
  "comments_url": "https://api.github.com/repos/shap/shap/issues/2768/comments",
  "events_url": "https://api.github.com/repos/shap/shap/issues/2768/events",
  "html_url": "https://github.com/shap/shap/issues/2768",
  "id": 1451660681,
  "node_id": "I_kwDOBHDcK85WhpWJ",
  "number": 2768,
  "title": "DeepExplainer does not work with wrapped model (add layer to a pre-trained model)",
  "user": {
    "login": "giodavoli",
    "id": 79570860,
    "node_id": "MDQ6VXNlcjc5NTcwODYw",
    "avatar_url": "https://avatars.githubusercontent.com/u/79570860?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/giodavoli",
    "html_url": "https://github.com/giodavoli",
    "followers_url": "https://api.github.com/users/giodavoli/followers",
    "following_url": "https://api.github.com/users/giodavoli/following{/other_user}",
    "gists_url": "https://api.github.com/users/giodavoli/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/giodavoli/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/giodavoli/subscriptions",
    "organizations_url": "https://api.github.com/users/giodavoli/orgs",
    "repos_url": "https://api.github.com/users/giodavoli/repos",
    "events_url": "https://api.github.com/users/giodavoli/events{/privacy}",
    "received_events_url": "https://api.github.com/users/giodavoli/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-11-16T14:00:02Z",
  "updated_at": "2022-11-16T14:01:44Z",
  "closed_at": null,
  "author_association": "NONE",
  "active_lock_reason": null,
  "body": "Hi @slundberg,\r\n\r\nI'm using DeepExplainer for a Keras functional model that combines two (pre-trained) models but I'm getting a weird error:\r\n\r\n```\r\nexplainer_test = shap.DeepExplainer(model_wrapped, background)\r\n\r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)\r\n   1364     try:\r\n-> 1365       return fn(*args)\r\n   1366     except errors.OpError as e:\r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in _run_fn(feed_dict, fetch_list, target_list, options, run_metadata)\r\n   1349       return self._call_tf_sessionrun(options, feed_dict, fetch_list,\r\n-> 1350                                       target_list, run_metadata)\r\n   1351 \r\n\r\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py in _call_tf_sessionrun(self, options, feed_dict, fetch_list, target_list, run_metadata)\r\n   1442                                             fetch_list, target_list,\r\n-> 1443                                             run_metadata)\r\n   1444 \r\n\r\nInvalidArgumentError: 2 root error(s) found.\r\n  (0) Invalid argument: You must feed a value for placeholder tensor 'input_1' with dtype float and shape [?,784]\r\n\t [[{{node input_1}}]]\r\n\t [[activation_2/Sigmoid/_241]]\r\n  (1) Invalid argument: You must feed a value for placeholder tensor 'input_1' with dtype float and shape [?,784]\r\n\t [[{{node input_1}}]]\r\n0 successful operations.\r\n0 derived errors ignored.\r\n```\r\n\r\n\r\nTo simplify the problem I'm only adding a new Input layer to an existing model. both the simple model and the existing one work (make predictions,...). With the existing model, I am able to use DeepExplainer but not with the wrapped model, any idea why? I didn't find anyone with this kind of error.\r\n\r\n`model_easy.summary()`\r\n![image](https://user-images.githubusercontent.com/79570860/202197224-4a6434df-86fa-41ac-bc1c-99e4389de09f.png)\r\n\r\n`model_wrapped.summary()`\r\n![image](https://user-images.githubusercontent.com/79570860/202197096-428bf647-1617-4419-b405-fd0e5ba9699c.png)\r\n\r\nA demo code that I'm using is the following\r\n\r\n```\r\nimport tensorflow as tf\r\nfrom numba import cuda\r\nimport tensorflow.keras as keras\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport os\r\nfrom tensorflow.keras.utils import to_categorical\r\nimport shap\r\ntf.compat.v1.disable_v2_behavior()\r\n\r\ndef model_NN_shallow(inputshape,drop):\r\n    \r\n    initializer = tf.keras.initializers.HeNormal()\r\n    X_input = tf.keras.Input(shape=(inputshape,),name='input_1')\r\n    \r\n\r\n    X = tf.keras.layers.Dense(128, kernel_initializer=\"he_normal\")(X_input)\r\n    X = tf.keras.layers.Activation(\"elu\")(X)\r\n    X = tf.keras.layers.BatchNormalization()(X)\r\n    X = tf.keras.layers.Dropout(drop)(X)\r\n\r\n\r\n    \r\n    initializer = tf.keras.initializers.HeNormal()\r\n    X = tf.keras.layers.Dense(16, kernel_initializer=\"he_normal\")(X)\r\n    X = tf.keras.layers.Activation(\"elu\")(X)\r\n    X = tf.keras.layers.BatchNormalization()(X)\r\n    X = tf.keras.layers.Dropout(drop)(X)\r\n    \r\n    \r\n    initializer = tf.keras.initializers.HeNormal()\r\n    X = tf.keras.layers.Dense(10, kernel_initializer=\"he_normal\")(X)\r\n    X = tf.keras.layers.Activation(\"sigmoid\")(X)\r\n\r\n    model = tf.keras.Model(inputs = X_input, outputs = X)\r\n    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss='binary_crossentropy',metrics=['accuracy'])\r\n    return model\r\n\r\ndef stupidWrapper(model, inputshape):\r\n    first_input = tf.keras.Input(shape=(inputshape,),name = 'input_2')\r\n    new_model = model(first_input)\r\n\r\n    wrapper_model = tf.keras.models.Model(inputs=first_input, outputs=new_model)\r\n    return wrapper_model\r\n\r\ndef main():\r\n\r\n    (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\r\n    classes=[0,1,2,3,4,5,6,7,8,9]\r\n    x_train = x_train / 255.0\r\n    x_test = x_test / 255.0\r\n    x_val,y_val = x_test[:5000],y_test[:5000]\r\n    x_test,y_test=x_test[5000:],y_test[5000:]\r\n\r\n    y_train = to_categorical(y_train, num_classes=10)\r\n    y_val = to_categorical(y_val, num_classes=10)\r\n    y_test = to_categorical(y_test, num_classes=10)\r\n    #2 dim, easier to manage\r\n    x_train = x_train.reshape(-1,784)\r\n    x_val = x_val.reshape(-1,784)\r\n    x_test = x_test.reshape(-1,784)\r\n\r\n    model_easy = model_NN_shallow(np.shape(x_train)[1],0.25)\r\n    model_easy.fit(\r\n        x_train,\r\n        y_train,\r\n        batch_size=1024,\r\n        epochs=10,\r\n        validation_data=(x_val, y_val),\r\n        verbose = 0,\r\n    )    \r\n    #Wrap\r\n    model_wrapped = stupidWrapper(model_easy, x_train.shape[1])\r\n   #SHAP\r\n    background = x_train[np.random.choice(x_train.shape[0], 100, replace=False)]\r\n    background_test = x_test[np.random.choice(x_test.shape[0], 100, replace=False)]\r\n    explainer_test = shap.DeepExplainer(model_easy, background)\r\n    shap_values_test = explainer_test.shap_values(background_test)\r\n    explainer_test = shap.DeepExplainer(model_wrapped, background)\r\n    shap_values_test = explainer_test.shap_values(background_test)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\nI have Tensorflow 2.3.4 and shap 0.41\r\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/shap/shap/issues/2768/reactions",
    "total_count": 4,
    "+1": 4,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/shap/shap/issues/2768/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
